#!/usr/bin/env zsh

# use emacs keybinds in zsh, this is mostly to just not accidentlaly go into vi
# command mode if escape gets pressed (or an escape sequence leaks)
bindkey -e

# tmux autostart (supplied by plugins/tmux from oh-my-zsh)
export ZSH_TMUX_AUTOSTART=true

# fzf environment variables (fzf support supplied by plugins/fzf from oh-my-sh)
export FZF_BASE="$(dirname $(which fzf))"
export FZF_DEFAULT_COMMAND=fd

### Plugins (managed by zplug)
export ZPLUG_HOME=/home/george/.zplug
if [[ "$OSTYPE" == "darwin"* ]]; then
  export ZPLUG_HOME=/opt/homebrew/opt/zplug
fi
source $ZPLUG_HOME/init.zsh

zplug "themes/robbyrussell", as:theme, from:oh-my-zsh
zplug "plugins/tmux", as:plugin, from:oh-my-zsh
zplug "plugins/fzf", as:plugin, from:oh-my-zsh
zplug "plugins/kubectl", as:plugin, from:oh-my-zsh
zplug "plugins/gpg-agent", as:plugin, from:oh-my-zsh
zplug "plugins/mise", as:plugin, from:oh-my-zsh
zplug "zsh-users/zsh-autosuggestions", as:plugin, from:github
zplug "zsh-users/zsh-syntax-highlighting", as:plugin, from:github

if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

zplug load

if command -v systemd-detect-virt &>/dev/null && [[ "$(systemd-detect-virt)" == "wsl" ]]; then
  # ensure xdg-open works on WSL
  export BROWSER="powershell.exe start"

  # some applications, like vscode, use this envvar to figure out they're being launched from WSL
  # this exists already in bash on login, but the envvar isn't ported into zsh
  export WSL_DISTRO_NAME="$(IFS='\'; x=($(wslpath -w /)); echo "${x[${#x[@]}-1]}")"
fi

# apt installations of bat install as "batcat"
if command -v batcat &>/dev/null; then
  alias bat='batcat'
fi

# general aliases
alias cat='bat --tabs 2'
alias vim='nvim'
alias ls='lsd'

export EDITOR=nvim

alias gp='git push'
alias gs='git switch'

# git switch and pull
# with no args it switches to main/master, pulls, and fetches
# with one arg it switches to the given branch and pulls
gsp() {
  if [[ "$#" -ne 1 ]]; then
    local branch='main'

    git rev-parse --verify $branch > /dev/null 2>&1
    if [[ "$?" -ne 0 ]]; then
      local branch='master'
    fi

    gs $branch && git pull origin $branch
    git fetch
  else
    gs $1 && git pull origin $1
  fi
}

# git hard restore
# restores every file and then removes all untracked files
ghr() {
  git restore --staged .
  git restore .
  git ls-files --others --exclude-standard | xargs -n1 rm
}

# Ensure mise-installed binaries are in $PATH
export PATH="$HOME/.local/share/mise/shims:$PATH"

# Ensure krew is in $PATH
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
